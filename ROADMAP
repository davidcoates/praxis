=========
OPERATORS
=========

* Operators should be pronouncable => Operators are (only) syntax, identified with a named function.

* Operator precedence is defined relative to other operators.

* Operator precedence is transitive.

plus : (Int, Int) -> Int
plus = ...

times : (Int, Int) -> Int
times = ...

negate : Int -> Int
negate = ...

operator left (_ + _) = plus

operator left (_ * _) = times binds
  stronger than (_ + _)

operator (- _) = negate binds
  stronger than (_ * _)


* Operators can be imported / exported (infix form can not be qualified)

Prelude.Num.(_ + _) (4, 2)


========
SECTIONS
========

* Holes can be used to create sections, e.g., (_ + 2) = \x -> x + 2.

* Multiple holes produce a lambda accepting a tuple argument.

* TODO should holes be allowed outside of operators, with an appropriate enclosing grammar level? E.g.,
  - f _ + 2 = \x -> f x + 2
  - f g h _ = \x -> f g h x


==================================
RIGHT ASSOCIATIVITY OF APPLICATION
==================================

* Function and type application is right-associative.

* Data constructors take at most one argument (which can be a tuple)

* Type constrcutors take at most one argument (which can be a type tuple)


===========
TYPE TUPLES
===========

* [_, _] constructs a type pair (nesting as (_, _) does to allow type tuples) 

* if t1 : k1, t2 : k2 then [t1, t2] : [k1, k2].

data Parser [t, a] = Parser (\[t] -> (Maybe a, [t]))


=============
TYPE SECTIONS
=============

* Holes may be used as with sections to create type sections.


========================
INTERFACES AND INSTANCES
========================

interface Functor [?v, f] where
  map : forall a b. (?v a -> b) -> ?v (f a) -> f b
  operator (_ <$> _) = map _ _

instance forall ?v. Functor ?v List where
  map f = cases
    Nil          -> Nil
    Cons (x, xs) -> Cons (f x) (map f xs)

instance forall k ?v. Functor [?v, Map [k, _]] where
  ...

data Ordering = LT | EQ | GT deriving Eq

interface Eq a where
  op == : (!a, !a) -> Bool
  x == y = not (x /= y)
  op /=_ : (!a, !a) -> Bool
  x /= y = not (x == y)
  minimal instance op == | op /=

interface Eq a => Ord a where
  compare : (!a, !a) -> Ordering
  default instance Eq a where
    x == y = compare (x, y) == EQ

Default instances to derive upwards.


======
TUPLES
======

Nested

(x, y, z) == (x, (y, z))


=======
RECORDS
=======

{ Con1 : Type1, Con2 : Type2, ... }

import Lens (Con1) -- Can introduce arbitrary lenses

>>> Requires Rank2 types <<<

Con1 : forall a b. Con1 a in b => (forall ?v f. Functor ?v f => (a -> f a) -> (b -> f b))


Ordered, { Con1 : x, Con2 : y } != { Con2 : y, Con1 : x }

Introduce a type-level function Tuple:

Tuple { Con1 : Type1, Con2 : Type2, Con3 : Type3 } = ( Type1, Type2, Type3 )

record   : forall a b. (a ~ Tuple b) => a -> b
unrecord : forall a b. (a ~ Tuple b) => b -> a


==================
REMAINING PROBLEMS
==================

