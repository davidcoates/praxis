
type List a = cases
  Nil
  Cons (a, List a)

map : forall ?v a b. (?v a -> b) -> ?v List a -> List b
map f = cases
  Nil          -> Nil
  Cons (x, xs) -> Cons (f x, (map f) xs)

sum : !List Int -> Int
sum = cases
  Nil          -> 0
  Cons (x, xs) -> x + sum xs

main : () -> ()
main () = do
  let xs = Cons (1, Cons (2, Cons (3, Nil)))
  let ys = (map (\x -> x + 1)) !xs
  print sum !xs
  print sum !ys
